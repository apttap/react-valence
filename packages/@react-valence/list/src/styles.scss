:root {
  --valence-listview-item-compact-padding-y: var(
    --valence-global-dimension-size-50
  );
  --valence-listview-item-regular-padding-y: var(
    --valence-global-dimension-size-85
  );
  --valence-listview-item-spacious-padding-y: var(
    --valence-global-dimension-size-100
  );
  --valence-listview-border-width: var(
    --valence-table-border-size,
    var(--valence-alias-border-size-thin)
  );
  --valence-listview-border-radius: var(
    --valence-table-border-radius,
    var(--valence-alias-border-radius-regular)
  );
  --valence-listview-item-border-radius: calc(
    var(--valence-listview-border-radius) -
      var(--valence-listview-border-width)
  );
  --valence-listview-row-sticky-focus-indicator-width: 3px;
  --valence-listview-item-line-height: calc(
    var(
        --valence-table-cell-text-size,
        var(--valence-alias-font-size-default)
      ) *
      var(
        --valence-table-cell-text-line-height,
        var(--valence-alias-body-text-line-height)
      ) - 1px
  );
  --valence-listview-item-title-text-color: var(
    --valence-global-color-gray-800
  );
  --valence-listview-item-title-text-size: var(
    --valence-global-dimension-font-size-100
  );
  --valence-listview-item-description-text-color: var(
    --valence-global-color-gray-700
  );
  --valence-listview-item-description-text-size: var(
    --valence-global-dimension-font-size-75
  );
}

.valence-ListView {
  box-sizing: border-box;
  border-color: var(
    --valence-table-border-color,
    var(--valence-alias-border-color-mid)
  );
  border-style: solid;
  position: relative;
  border-width: var(--valence-listview-border-width);
  border-radius: var(--valence-listview-border-radius);
  overflow: auto;
  vertical-align: var(--valence-table-cell-vertical-alignment);
  border-collapse: separate;
  border-spacing: 0;
  transform: translate3d(0, 0, 0);
  padding: 0;
  background-color: var(
    --valence-table-background-color,
    var(--valence-global-color-gray-50)
  );
  outline: 0;
  user-select: none;

  .valence-ListView-row {
    outline: none;
  }

  &.valence-ListView--emphasized {
    &.valence-ListView--dropTarget {
      .valence-ListViewItem:not(.is-selected) {
        /* shift bottom border inwards so it doesn't overlap the root drop target */
        &:after {
          inset-inline-start: 1px;
          inset-inline-end: 1px;
        }
      }
    }
    .valence-ListViewItem {
      /* common pseudoelement for box shadows */
      &:after {
        content: "";
        display: block;
        position: absolute;
        inset-inline-start: 0;
        inset-inline-end: 0;
        inset-block-end: 0;
        inset-block-start: 0;
        z-index: 3;
        pointer-events: none;
      }

      &.is-selected {
        background-color: var(--valence-table-row-background-color-selected);
        &.is-hovered,
        &.is-active {
          background-color: var(
            --valence-table-row-background-color-selected-hover
          );
        }

        &:focus-ring {
          background-color: var(
            --valence-table-row-background-color-selected-key-focus
          );
        }

        /* Negative block start causes borders to actually be shared between items. Only works if we allow item overflow to be visible, like card focus rings. */
        &:after {
          inset-block-start: -1px;
          box-shadow: inset 1px 0 0 0 var(--valence-global-color-blue-500),
            inset -1px 0 0 0 var(--valence-global-color-blue-500),
            inset 0 -1px 0 0 var(--valence-global-color-blue-500),
            inset 0 1px 0 0 var(--valence-global-color-blue-500);
        }
      }

      /* First item in the ListView should not have a border that extends outside of itself to the top, it doesn't need to share a border space. */
      &.valence-ListViewItem--firstRow {
        &.is-selected {
          &:after {
            inset-block-start: 0px;
          }
        }
      }
    }

    &:not(.valence-ListView--quiet) {
      .valence-ListViewItem {
        /* Box shadow for bottom border for non-selected rows that aren't immediately above a selected row (grey border bottom). */
        /* Also omit bottom border for last row if the total content height of the ListView is equal or greater than the height of the container. This avoids overlapping bottom borders. */
        &:not(.is-selected):not(.is-next-selected):not(.valence-ListViewItem--isFlushBottom) {
          &:after {
            box-shadow: inset 0 -1px 0 0 var(--valence-table-cell-border-color);
          }
        }

        &.valence-ListViewItem--firstRow.is-selected {
          &:after {
            border-start-start-radius: var(
              --valence-listview-item-border-radius
            );
            border-start-end-radius: var(
              --valence-listview-item-border-radius
            );
          }
        }
      }

      &:not(.valence-ListView--loadingMore) {
        .valence-ListViewItem--lastRow.valence-ListViewItem--isFlushBottom.is-selected {
          &:after {
            border-end-start-radius: var(
              --valence-listview-item-border-radius
            );
            border-end-end-radius: var(--valence-listview-item-border-radius);
          }
        }
      }

      &.valence-ListView--isVerticalScrollbarVisible {
        .valence-ListViewItem {
          &.valence-ListViewItem--firstRow.is-selected {
            &:after {
              border-start-end-radius: 0;
            }
          }
        }

        &:not(.valence-ListView--loadingMore) {
          .valence-ListViewItem--lastRow.valence-ListViewItem--isFlushBottom.is-selected {
            &:after {
              border-end-end-radius: 0;
            }
          }
        }
      }

      &.valence-ListView--isHorizontalScrollbarVisible {
        &:not(.valence-ListView--loadingMore) {
          .valence-ListViewItem--lastRow.valence-ListViewItem--isFlushBottom.is-selected {
            &:after {
              border-end-start-radius: 0;
              border-end-end-radius: 0;
            }
          }
        }
      }
    }
  }
  &.valence-ListView--wrap .valence-ListViewItem {
    & .valence-ListViewItem-content,
    & .valence-ListViewItem-description {
      white-space: normal;
      height: auto;
    }
  }
}

.valence-ListView-row {
  cursor: default;
  /* Not sticky because listview is a single column. If we want to make sticky, will need a cell wrapper like TableView for display: inline-block */
  &:focus-ring {
    &:before {
      content: "";
      position: absolute;
      inset-block-start: 0;
      inset-block-end: 0;
      inset-inline-start: 0;
      width: var(--valence-listview-row-sticky-focus-indicator-width);
      z-index: 4;
      background: var(--valence-selectlist-option-focus-indicator-color);
    }
  }
}

.valence-ListView.valence-ListView--quiet {
  background-color: var(--valence-alias-background-color-transparent);
  border-width: 0;
  border-radius: 0;

  .valence-ListView-row {
    &.round-tops {
      &:focus-ring {
        &:before {
          border-start-start-radius: var(
            --valence-listview-item-border-radius
          );
        }
      }
      & > .valence-ListViewItem {
        border-start-start-radius: var(--valence-listview-item-border-radius);
        border-start-end-radius: var(--valence-listview-item-border-radius);

        &:after {
          border-start-start-radius: var(
            --valence-listview-item-border-radius
          );
          border-start-end-radius: var(--valence-listview-item-border-radius);
        }
      }
    }

    &.round-bottoms {
      &:focus-ring {
        &:before {
          border-end-start-radius: var(--valence-listview-item-border-radius);
        }
      }
      & > .valence-ListViewItem {
        border-end-start-radius: var(--valence-listview-item-border-radius);
        border-end-end-radius: var(--valence-listview-item-border-radius);

        &:after {
          border-end-start-radius: var(--valence-listview-item-border-radius);
          border-end-end-radius: var(--valence-listview-item-border-radius);
        }
      }
    }
  }
}

.valence-ListViewItem {
  display: grid; /* TODO: define grid areas */
  box-sizing: border-box;
  font-size: var(
    --valence-table-cell-text-size,
    var(--valence-alias-font-size-default)
  );
  font-weight: var(
    --valence-table-cell-text-font-weight,
    var(--valence-global-font-weight-regular)
  );
  line-height: var(--valence-listview-item-line-height);
  padding: var(--valence-listview-item-regular-padding-y)
    var(--valence-global-dimension-size-160);
  position: relative;
  /*background-color: var(--valence-table-background-color, var(--valence-global-color-gray-50));*/
  color: var(
    --valence-table-cell-text-color,
    var(--valence-alias-text-color)
  );
  outline: 0;
  min-height: var(--valence-global-dimension-size-500);

  &.is-hovered,
  &.is-focused {
    background-color: var(--valence-table-row-background-color-hover);
  }

  &:focus-ring {
    background-color: var(--valence-table-row-background-color-hover);
  }

  &.is-active {
    background-color: var(--valence-table-row-background-color-down);
  }

  &.is-selected {
    background-color: var(--valence-table-row-background-color-hover);

    &.is-hovered,
    &.is-active {
      background-color: var(--valence-table-row-background-color-hover);
    }

    &:focus-ring {
      background-color: var(
        --valence-table-row-background-color-selected-key-focus
      );
    }
  }

  &.is-disabled {
    &,
    .valence-ListViewItem-content,
    .valence-ListViewItem-description {
      color: var(--valence-alias-text-color-disabled);
    }
  }

  &.has-checkbox {
    /* have to eliminate vertical padding to allow proper vertical alignment */
    padding-top: 0px;
    padding-bottom: 0px;
  }

  .valence-ListViewItem-grid {
    display: grid;
    grid-template-columns: auto auto auto 1fr auto auto auto;
    grid-template-rows: 1fr auto;
    grid-template-areas:
      "draghandle checkbox thumbnail content actions actionmenu chevron"
      "draghandle checkbox thumbnail description actions actionmenu chevron";
    align-items: center;
  }

  .valence-ListViewItem-draghandle-container {
    grid-area: draghandle;
    width: var(--valence-global-dimension-size-250);
    display: flex;
    align-self: stretch;
    justify-self: stretch;
    justify-content: center;
    padding: var(--valence-global-dimension-size-25);
    padding-inline-start: var(--valence-global-dimension-size-40);

    .valence-ListViewItem-draghandle-button {
      width: var(--valence-global-dimension-size-200);
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: var(--valence-alias-border-radius-regular);

      &:focus-ring {
        box-shadow: inset 0 0 0 2px
          var(--valence-table-cell-border-color-key-focus);
        outline: none;
      }
    }
  }

  .valence-ListViewItem-checkboxWrapper {
    grid-area: checkbox;
    align-items: center;
    justify-items: center;
    transition-duration: 160ms;
    display: flex;
  }

  .valence-ListViewItem-checkbox {
    min-height: 0;
    height: 100%;

    > span {
      margin: 0;
    }
  }

  .valence-ListViewItem-thumbnail {
    grid-area: thumbnail;
    justify-items: center;
    padding-inline-end: var(--valence-global-dimension-size-100);
    display: flex;
    border-radius: var(--valence-global-dimension-size-25);
    width: var(--valence-global-dimension-size-400);
    height: var(--valence-global-dimension-size-400);
    align-items: center;
    justify-content: center;

    > img {
      width: unset;
      height: 100%;
    }
  }

  .valence-ListViewItem-content,
  .valence-ListViewItem-description {
    flex-grow: 1;

    /* truncate text with ellipsis */
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    height: var(--valence-listview-item-line-height);
  }

  .valence-ListViewItem-content {
    grid-area: content;
    color: var(--valence-listview-item-title-text-color);
    font-size: var(--valence-listview-item-title-text-size);
  }

  &:not(.valence-ListView--hasDescription) {
    .valence-ListViewItem-content {
      grid-area: content / description;
    }
  }

  .valence-ListViewItem-description {
    grid-area: description;
    color: var(--valence-listview-item-description-text-color);
    font-size: var(--valence-listview-item-description-text-size);
  }

  .valence-ListViewItem-actions {
    grid-area: actions;
    flex-grow: 0;
    flex-shrink: 0;
  }

  .valence-ListViewItem-actionmenu {
    grid-area: actionmenu;
  }

  .valence-ListViewItem-parentIndicator {
    grid-area: chevron;
    padding-inline-start: var(--valence-global-dimension-size-75);
    display: none;
    transition: color var(--valence-global-animation-duration-100);

    &.is-disabled {
      color: var(--valence-alias-icon-color-disabled);
    }
  }

  &.valence-ListViewItem-dragPreview {
    width: var(--valence-global-dimension-size-2400);
    border: 1px solid var(--valence-dropzone-border-color-selected-hover);
    border-radius: var(--valence-alias-border-radius-regular);
    background-color: var(
      --valence-table-background-color,
      var(--valence-global-color-gray-50)
    );

    .valence-ListViewItem-grid {
      grid-template-areas:
        "thumbnail content     . badge"
        "thumbnail description . badge";
      grid-template-columns: auto auto 1fr auto;
    }

    .valence-ListViewItem-badge {
      grid-area: badge;
      color: white;
      background: var(--valence-global-color-blue-400);
      padding: 0 8px;
      border-radius: var(--valence-alias-border-radius-regular);
    }

    &.valence-ListViewItem-dragPreview--multiple {
      position: relative;

      &:after {
        content: "";
        display: block;
        position: absolute;
        z-index: -1;
        top: 4px;
        inset-inline-start: 4px;
        width: 100%;
        height: 100%;
        border: 1px solid var(--valence-dropzone-border-color-selected-hover);
        border-radius: var(--valence-alias-border-radius-regular);
        background-color: var(
          --valence-table-background-color,
          var(--valence-global-color-gray-50)
        );
      }
    }

    .valence-ListViewItem-actions,
    .valence-ListViewItem-actionmenu {
      display: none;
    }
  }
}
.valence-ListView:not(.valence-ListView--quiet) {
  /* give first and last items border-radius to match listview container */

  .valence-ListViewItem--firstRow.valence-ListViewItem {
    border-start-start-radius: var(
      --valence-listview-item-start-end-border-radius
    );
    border-start-end-radius: var(
      --valence-listview-item-start-end-border-radius
    );
  }

  .valence-ListViewItem--lastRow.valence-ListViewItem {
    border-end-start-radius: var(
      --valence-listview-item-start-end-border-radius
    );
    border-end-end-radius: var(
      --valence-listview-item-start-end-border-radius
    );
  }

  &.valence-ListView--isVerticalScrollbarVisible {
    .valence-ListViewItem--firstRow.valence-ListViewItem {
      border-start-end-radius: 0;
    }

    .valence-ListViewItem--lastRow.valence-ListViewItem {
      border-end-end-radius: 0;
    }
  }

  &.valence-ListView--isHorizontalScrollbarVisible {
    .valence-ListViewItem--lastRow.valence-ListViewItem {
      border-end-start-radius: 0;
      border-end-end-radius: 0;
    }
  }
}

.valence-ListView {
  /* When we can use subgrid, get rid of this. */
  &.valence-ListView--hasAnyChildren {
    .valence-ListViewItem-parentIndicator {
      display: inline-block;
      visibility: hidden;
    }
    .valence-ListViewItem-parentIndicator--hasChildItems {
      visibility: visible;
    }
  }
}

.valence-ListView--compact .valence-ListViewItem {
  padding-top: var(--valence-listview-item-compact-padding-y);
  padding-bottom: var(--valence-listview-item-compact-padding-y);
  min-height: var(--valence-global-dimension-size-400);
}

.valence-ListView--spacious .valence-ListViewItem {
  padding-top: var(--valence-listview-item-spacious-padding-y);
  padding-bottom: var(--valence-listview-item-spacious-padding-y);
  min-height: var(--valence-global-dimension-size-600);
}

.valence-ListView--draggable .valence-ListViewItem {
  padding-inline-start: 0;

  .valence-ListViewItem-checkbox {
    input {
      inset-inline-start: 0;
    }
  }
}

.valence-ListViewItem--dropTarget {
  background-color: var(--valence-alias-highlight-selected);
  box-shadow: inset 2px 0 0 0 var(--valence-table-cell-border-color-key-focus),
    inset -2px 0 0 0 var(--valence-table-cell-border-color-key-focus),
    inset 0 -3px 0 0 var(--valence-table-cell-border-color-key-focus),
    inset 0 2px 0 0 var(--valence-table-cell-border-color-key-focus);
}

.valence-ListView.valence-ListView--dropTarget {
  border-color: var(--valence-global-color-blue-500);
  background-color: var(--valence-alias-highlight-selected);
  box-shadow: inset 0 0 0 1px var(--valence-table-cell-border-color-key-focus);

  /* Add border to quiet ListView only when it is a drop target */
  &.valence-ListView--quiet {
    box-shadow: inset 0 0 0 1px
        var(--valence-table-cell-border-color-key-focus),
      0 0 0 1px var(--valence-table-cell-border-color-key-focus);
  }
}

.valence-ListView-centeredWrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  &.valence-ListView-centeredWrapper--loadingMore {
    padding-top: var(--valence-global-dimension-size-50);
  }
}

.valence-ListViewInsertionIndicator {
  width: calc(100% - (2 * var(--valence-dropindicator-circle-size)));
  inset-inline-start: var(--valence-dropindicator-circle-size);
  position: absolute;
  outline: none;

  &.valence-ListViewInsertionIndicator--dropTarget {
    background: var(--valence-dropindicator-border-color);
    border-bottom: 2px solid var(--valence-dropindicator-border-color);

    &:before {
      left: calc(var(--valence-dropindicator-circle-size) * -1);
    }

    &:after {
      right: calc(var(--valence-dropindicator-circle-size) * -1);
    }

    &:before,
    &:after {
      content: "";
      position: absolute;
      top: calc(
        var(--valence-dropindicator-circle-size) * -1 / 2 +
          var(--valence-dropindicator-border-size) / 2
      );
      width: var(--valence-dropindicator-circle-size);
      height: var(--valence-dropindicator-circle-size);
      border-radius: 50%;
      border: var(--valence-dropindicator-border-size) solid;
      box-sizing: border-box;
      border-color: var(--valence-dropindicator-circle-border-color);
      background-color: var(
        --valence-table-background-color,
        var(--valence-global-color-gray-50)
      );
      z-index: 5;
    }
  }
}

.valence-ListViewItem-checkbox--enter {
  opacity: 0.01;
  max-width: 0px;
}
.valence-ListViewItem-checkbox--enterActive {
  opacity: 1;
  max-width: 80px;
}
.valence-ListViewItem-checkbox--exit {
  opacity: 1;
  max-width: 80px;
}
.valence-ListViewItem-checkbox--exitActive {
  opacity: 0.01;
  max-width: 0px;
}

.valence-ListView {
  &:focus-ring {
    border-color: var(--valence-global-color-blue-500);
    box-shadow: inset 0 0 0 1px
      var(--valence-table-cell-border-color-key-focus);
  }
}
