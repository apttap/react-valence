@import "../commons/index.scss";

.Table {
  border-collapse: separate;
  border-spacing: 0;
  outline: none;
  isolation: isolate;
}

/* specificity must be higher than `.Icon` */
svg.Table-sortedIcon {
  display: none;
  flex: 0 0 auto;
  margin-inline-start: var(--sandia-padding-unit);
  min-inline-size: var(--sandia-base-unit);

  vertical-align: middle;

  transition: transform var(--valence-global-animation-duration-100) ease-in-out;
}

.Table-headWrapper {
  border-left-width: 1px;
  border-left-style: solid;
  border-right-width: 1px;
  border-right-style: solid;
  flex: 0 0 auto;
}
.Table-headCellContents {
  display: inline-block;
  min-inline-size: 0;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.Table-headCell {
  display: flex;
  box-sizing: border-box;
  font-size: var(--valence-table-header-text-size);
  font-weight: var(--valence-table-header-text-font-weight);
  line-height: var(--sandia-line-height);
  height: var(--sandia-line-height);
  letter-spacing: var(--valence-table-header-text-letter-spacing);
  text-transform: uppercase;
  padding: 0;
  transition: color var(--valence-global-animation-duration-100) ease-in-out;
  outline: 0;
  border-radius: var(--valence-table-header-border-radius);

  &.is-sortable {
    cursor: default;
  }

  &.is-sorted-asc,
  &.is-sorted-desc {
    .Table-sortedIcon {
      display: inline-block;
      /* offset icon because it's not properly aligned */
      margin-top: calc(var(--valence-global-dimension-size-25) * -1);
    }
  }

  &.is-sorted-asc {
    .Table-sortedIcon {
      transform: rotateZ(180deg);
    }
  }
  &.is-resizable {
    padding: 0;
    .Table-headCellContents {
      flex: 1 1 auto;
      min-width: 0;
    }
    .Table-headCellButton {
      box-sizing: border-box;
    }
  }
}

.Table-columnResizer {
  display: flex;
  flex: 0 0 auto;
  justify-content: flex-end;
  box-sizing: border-box;
  inline-size: 10px;
  block-size: 100%;
  user-select: none;

  &:after {
    content: "";
    display: block;
    box-sizing: border-box;
    inline-size: 1px;
    block-size: 100%;
  }

  &:active,
  &.focus-ring {
    outline: none;
    &:after {
      inline-size: 2px;
    }
  }
}

.Table-cell--alignCenter {
  text-align: center;
}

.Table-cell--alignEnd {
  text-align: end;
}

/* Helper for shared drop target overlay */
@mixin drop-target {
  &:before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    z-index: 1;
  }
}

.Table-body {
  position: relative;

  border-width: var(--valence-table-border-size);
  border-radius: var(--valence-table-border-radius);
  overflow: auto;
  vertical-align: center;

  /* Fix scrollbars on iOS with sticky row headers */
  transform: translate3d(0, 0, 0);

  &.is-drop-target {
    @include drop-target;
  }
}

/* The tbody tag doesn't allow setting a border-radius, so these hacks are to make that work
   by putting it on the individual cells instead. */
.Table:not(.Table--quiet) {
  tbody.Table-body {
    border-width: var(--valence-table-border-size);
    border-radius: var(--valence-table-border-radius);

    .Table-row:first-child .Table-cell:first-child {
      border-top-left-radius: var(--valence-table-border-radius);
    }

    .Table-row:first-child .Table-cell:last-child {
      border-top-right-radius: var(--valence-table-border-radius);
    }

    .Table-row:last-child .Table-cell:first-child {
      border-bottom-left-radius: var(--valence-table-border-radius);
    }

    .Table-row:last-child .Table-cell:last-child {
      border-bottom-right-radius: var(--valence-table-border-radius);
    }
  }
}

.Table-cell {
  box-sizing: border-box;
  font-size: var(--valence-table-cell-text-size);
  font-weight: var(--valence-table-cell-text-font-weight);
  /* need to subtract 1px here because 14px * 1.5 + 14px + 14px = 49px, and we want 48px */
  line-height: var(--sandia-line-height);
  // padding: var(--valence-table-cell-regular-padding-y)
  //   var(--valence-table-cell-padding-x);
}
.Table--regular {
}

.Table--compact .Table-cell {
  // padding-top: var(--valence-table-cell-compact-padding-y);
  // padding-bottom: var(--valence-table-cell-compact-padding-y);
}

.Table--spacious .Table-cell {
  // padding-top: var(--valence-table-cell-spacious-padding-y);
  // padding-bottom: var(--valence-table-cell-spacious-padding-y);
}

.Table-cellContents {
  flex: 1 1 0%;
  /* To ensure the flex child only takes up available width, see https://makandracards.com/makandra/66994-css-flex-and-min-width */
  min-width: 0px;

  /* truncate text with ellipsis */
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;

  /* allow focus ring of child to extend outside the bounds */
  padding: 4px;
  margin: -4px;
}

.Table-cell--hideHeader {
  padding: 0;
  justify-content: center;
}

.Table--wrap .Table-cellContents {
  white-space: normal;
}

.Table-cell,
.Table-headCell,
.Table-headCellButton {
  position: relative;
  padding: 0 var(--sandia-padding-unit);
  &:focus {
    outline: none;
  }

  &.focus-ring,
  &.is-focused {
    outline: none;

    &:before {
      content: "";

      /* Float above border */
      z-index: 1;
      position: absolute;

      top: 0;
      right: 0;
      bottom: 0;
      left: 0;

      border-radius: calc(
        var(--valence-table-cell-border-radius-key-focus) - 1px
      );
    }
  }
}

.Table-headCell,
.Table-headCellButton {
  &.focus-ring,
  &.is-focused {
    &:before {
      top: var(--valence-table-border-size);
      right: var(--valence-table-border-size);
      bottom: var(--valence-table-border-size);
      left: var(--valence-table-border-size);
    }
  }
}

.Table-cell--divider {
  border-inline-end-width: var(--valence-table-divider-border-size);
}

.Table-row {
  position: relative;
  cursor: default;
  transition: background-color var(--valence-global-animation-duration-100)
    ease-in-out;

  &:focus {
    outline: 0;
  }

  /* The focus ring should be sticky so it is visible at all horizontal scroll positions. */
  &.focus-ring {
    &:before {
      display: inline-block;
      content: "";
      position: sticky;
      inset-inline-start: 0;
      height: 100%;
      width: var(--valence-table-row-sticky-focus-indicator-width);
      z-index: 4;
      margin-inline-end: calc(
        var(--valence-table-row-sticky-focus-indicator-width) * -1
      );
    }

    .Table-cellWrapper:first-of-type {
      display: inline-block;
      vertical-align: top;
    }
  }

  &.is-drop-target {
    @inherit: %drop-target;
  }
}

.Table:not(.Table--loadingMore):not(.Table--quiet) {
  .Table-row {
    &.Table-row--lastRow.Table-row--isFlushBottom.is-selected {
      &:after {
        border-end-start-radius: var(--valence-table-row-border-radius);
        border-end-end-radius: var(--valence-table-row-border-radius);
      }
    }
  }
}

.Table:not(.Table--quiet) {
  .Table-row {
    &.Table-row--firstRow.is-selected {
      &:after {
        border-start-start-radius: var(--valence-table-row-border-radius);
        border-start-end-radius: var(--valence-table-row-border-radius);
      }
    }
  }
  &.Table--isVerticalScrollbarVisible {
    .Table-row {
      &.Table-row--firstRow.is-selected {
        &:after {
          border-start-end-radius: 0;
        }
      }
      /* beat specificity of isFlushBottom */
      &.Table-row--lastRow.is-selected.is-selected {
        &:after {
          border-end-end-radius: 0;
        }
      }
    }
  }
  &.Table--isHorizontalScrollbarVisible {
    .Table-row {
      /* beat specificity of isFlushBottom */
      &.Table-row--lastRow.is-selected.is-selected {
        &:after {
          border-end-start-radius: 0;
          border-end-end-radius: 0;
        }
      }
    }
  }
}

/* the CSS logical properties postcss plugin doesn't seem to work with .focus-ring. */
[dir="rtl"] .Table-row.focus-ring:before {
  right: 0;
}

.Table > .Table-body > .Table-row:last-of-type {
  border-bottom-style: none;
}

.Table--quiet {
  .Table-headWrapper {
    border-left: 0;
    border-right: 0;
  }

  .Table-body {
    border-radius: var(--valence-table-quiet-border-radius);
  }

  .Table-body,
  .Table-row {
    &.is-drop-target {
      &:before {
        border-radius: var(--valence-border-radius);
      }
    }
  }
}

.Table-headCell.Table-checkboxCell,
.Table-cell.Table-checkboxCell {
  //padding-inline-end: var(--valence-table-cell-checkbox-padding-right);
  /* have to eliminate vertical padding to allow proper vertical alignment */
  padding-top: 0px;
  padding-bottom: 0px;
  .Table-checkbox {
    //padding-inline-start: var(--sandia-padding-unit);
  }
}

.Table-checkbox {
  vertical-align: super;
}
