@import "../commons/index.scss";
@import "../overlay/index.scss";

.Tray-wrapper {
  inset-inline-start: 0;
  /* Positioned at the top of the window */
  position: fixed;
  top: 0;

  display: flex;
  justify-content: center;
  width: 100%;
  height: 100vh;

  /* Don't catch clicks */
  pointer-events: none;

  /* Appear above underlay */
  z-index: 2;
}

.Tray {
  @inherit: %valence-overlay;

  /* defined here so it can be accessed from JS */
  --valence-tray-margin-top: 64px;
  /* Overridden so that trays are full width on modern iPhone displays.
   * iPhone 13 Pro Max has a width of 428px. Add some buffer to be safe. */
  --valence-tray-max-width: 450px;

  width: var(--valence-tray-width);
  max-width: var(--valence-tray-max-width);
  min-height: var(--valence-tray-min-height);
  /* On mobile browsers, vh units are fixed based on the maximum height of the screen.
   * However, when you scroll, the toolbar and address bar shrink, making the viewport resize.
   * The visual viewport also shrinks when the keyboard is displayed. We use the VisualViewport
   * API in JS to set this CSS variable to ensure the height is correct. */
  max-height: calc(
    var(--valence-visual-viewport-height) - var(--valence-tray-margin-top)
  );
  /* Add padding at the bottom to account for the rest of the viewport height behind the keyboard.
   * This is necessary so that there isn't a visible gap that appears while the keyboard is animating
   * in and out. Fall back to the safe area inset to account for things like iOS home indicator. */
  padding-bottom: max(
    calc(100vh - var(--valence-visual-viewport-height)),
    env(safe-area-inset-bottom)
  );
  position: absolute;
  bottom: 0;
  outline: none;
  display: flex;
  flex-direction: column;

  border-radius: var(--valence-tray-full-width-border-radius)
    var(--valence-tray-full-width-border-radius)
    var(--valence-tray-border-radius) var(--valence-tray-border-radius);

  /* Start offset by the animation distance */
  transform: translateY(100%);

  /* Exit animations */
  transition: opacity var(--valence-dialog-exit-animation-duration)
      cubic-bezier(0.5, 0, 1, 1) var(--valence-dialog-exit-animation-delay),
    transform var(--valence-dialog-exit-animation-duration)
      cubic-bezier(0.5, 0, 1, 1) var(--valence-dialog-exit-animation-delay);

  &.is-open {
    @inherit: %valence-overlay--open;

    /* Entry animations */
    transition: transform var(--valence-dialog-entry-animation-duration)
        cubic-bezier(0, 0, 0.4, 1) var(--valence-dialog-entry-animation-delay),
      opacity var(--valence-dialog-entry-animation-duration)
        cubic-bezier(0, 0, 0.4, 1) var(--valence-dialog-entry-animation-delay);

    transform: translateY(0);
  }
}

.Tray--fixedHeight {
  height: calc(
    var(--valence-visual-viewport-height) - var(--valence-tray-margin-top)
  );
  top: var(--valence-tray-margin-top);
}

/* Should match --valence-tray-max-width above */
@media (max-width: 450px) {
  .Tray {
    border-radius: var(--valence-tray-border-radius);
  }
}
